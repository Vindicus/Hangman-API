DESIGN

What additional properties did you add to your models and why?

    Since Hangman is a two player game, I had to modify the Games model by adding player1 and player2 properties. Each player will have a word that they will input and the opposite player will have 10 attempts to guess each other's word. In order to keep track the number of attempts, attempts_remaining_player1 and attempts_remaining_player2 properties were added to keep track the number of guesses left to guess. If it reaches zero, the player is "hanged" fails the game. Each letter guessed will be stored to in the *_letter_guess list property. This is to ensure record keeping and making sure the player does not guess the same letter again. The other property *_word_right list is also used only if the letter the player guessed is correct and is stored separately than the *_letter_guess property. Each player that has a chance to guess, next_round property is used to keep track of whose turn it will be to guess. If the player guesses the correct word, winner property is used to identify this game's winner. Once winner is identified, game_over property will be set to True indicating that the game has completed in order to identify other games that are currently active. As for the users model, I have added the wins, losses, and total_games_played property for user stats purposes. This helps identify how many games, wins, and losses a user has played.

What were some of the trade-offs or struggles you faced when implementing the new game logic?

  At first the most difficult part was figuring out how to implement a two player game. The most struggles I had was implementing the make_move endpoint and how to store each letter that was guessed in the list. Initially, I had troubles figuring out how to identify whether the user had guessed the word correctly and identify the winner. This is essentially more difficult than "guess the number" game as only guessing the right number will indicate a winner. As for Hangman, one will need to have the correct letters and the number of letters that make up the word to identify the winner. Therefore, I had to maintain two lists: one list to store every letter the player had guessed and the other list to only store the letters that were part of the word. If the word contains repeated words such as "apple", that initially became a problem because if the user guessed the letter "p", it will store the correct letter "p" once in the list. Therefore, to fix this, I first had to initally count the number of repeated letters in the word and store in a dictionary. Next, take the guessed letter and locate that letter in the dictionary (key) and store in the database based on the number of times the letter has repeated itself in the word for each letter.